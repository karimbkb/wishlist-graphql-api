import com.github.spotbugs.snom.SpotBugsReport

buildscript {
    repositories {
        maven {
            url "https://plugins.gradle.org/m2/"
        }
    }
    dependencies {
        classpath "gradle.plugin.com.github.spotbugs.snom:spotbugs-gradle-plugin:4.5.0"
    }
}

buildscript {
    repositories {
        maven {
            url "https://plugins.gradle.org/m2/"
        }
    }
    dependencies {
        classpath "gradle.plugin.com.github.spotbugs.snom:spotbugs-gradle-plugin:4.5.0"
        classpath "com.github.jengelman.gradle.plugins:shadow:6.1.0"
    }
}

plugins {
    id "application"
    id "jacoco"
    id "io.freefair.lombok" version "5.2.1"
    id 'com.github.sherter.google-java-format' version '0.9'
    id "io.spring.dependency-management" version "1.0.10.RELEASE"
    id "com.github.johnrengelman.shadow" version "6.1.0"
    id "com.github.spotbugs" version "4.5.0"
}

sourceCompatibility = JavaVersion.VERSION_11
targetCompatibility = JavaVersion.VERSION_11

version "0.1"
group "de.karimbkb.wishlistgraphqlapi"

apply plugin: "com.github.johnrengelman.shadow"

repositories {
    mavenCentral()
    maven { url "https://jcenter.bintray.com" }
}

configurations {
    developmentOnly
    testImplementation {
        exclude group: 'org.apache.logging.log4j', module: 'log4j-slf4j-impl'
    }
}

configurations.all {
    resolutionStrategy.cacheChangingModulesFor 0, 'seconds'
}

dependencyManagement {
    imports {
        mavenBom "io.micronaut:micronaut-bom:$micronautVersion"
    }
}

dependencies {
    testImplementation "org.mockito:mockito-junit-jupiter:3.5.10"
    testImplementation "org.mock-server:mockserver-netty:5.11.1"
    testImplementation('org.mockito:mockito-inline:3.5.15')

    annotationProcessor platform("io.micronaut:micronaut-bom:$micronautVersion")
    annotationProcessor "io.micronaut:micronaut-inject-java"
    annotationProcessor "io.micronaut:micronaut-validation"
    annotationProcessor "org.projectlombok:lombok"
    implementation platform("io.micronaut:micronaut-bom:$micronautVersion")
    implementation "io.micronaut:micronaut-inject"
    implementation "io.micronaut:micronaut-validation"
    implementation "io.micronaut:micronaut-runtime"
    implementation "javax.annotation:javax.annotation-api"
    implementation "io.micronaut:micronaut-http-server-netty"
    implementation "io.micronaut:micronaut-http-client"
    implementation("io.micronaut.graphql:micronaut-graphql:1.3.0")
    implementation("io.micronaut.mongodb:micronaut-mongo-sync")
    testCompile "org.testcontainers:mongodb:1.15.2"
    testImplementation "org.testcontainers:junit-jupiter:1.15.2"

    runtimeOnly "ch.qos.logback:logback-classic:1.2.3"
    testAnnotationProcessor platform("io.micronaut:micronaut-bom:$micronautVersion")
    testAnnotationProcessor "io.micronaut:micronaut-inject-java"
    testImplementation platform("io.micronaut:micronaut-bom:$micronautVersion")
    testImplementation "org.junit.jupiter:junit-jupiter-api"
    testImplementation "io.micronaut.test:micronaut-test-junit5"
    testRuntimeOnly "org.junit.jupiter:junit-jupiter-engine"
}

test.classpath += configurations.developmentOnly

application {
    mainClassName = 'de.karimbkb.wishlistgraphqlapi.Application'
}

apply plugin: "com.github.spotbugs"
spotbugsTest.enabled = false

spotbugsMain {
    reports(({
        xml.enabled = false
        html.enabled = true
    } as Closure<NamedDomainObjectContainer<? extends SpotBugsReport>>))
}

spotbugs {
    excludeFilter = file("spotbugs-exclude.xml")
}


// use JUnit 5 platform
test {
    useJUnitPlatform()
    finalizedBy jacocoTestReport
}

googleJavaFormat {
    exclude 'src/test/*'
}

verifyGoogleJavaFormat {
    exclude 'src/test/*'
}

shadowJar {
    mergeServiceFiles()
}

jacocoTestReport {
    reports {
        xml.enabled = true
        html.enabled = true
    }

    afterEvaluate {
        classDirectories.setFrom(files(classDirectories.files.collect {
            fileTree(dir: it, exclude: [
                    '**/Application**',
                    '**/**StreamHandler**',
                    '**/**GraphQLFactory**',
            ])
        }))
    }
}

run.classpath += configurations.developmentOnly
run.jvmArgs('-noverify', '-XX:TieredStopAtLevel=1', '-Dcom.sun.management.jmxremote')
tasks.withType(JavaCompile){
    options.encoding = "UTF-8"
    options.compilerArgs.add('-parameters')
}

compileJava.dependsOn tasks.googleJavaFormat
