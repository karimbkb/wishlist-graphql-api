package de.karimbkb.wishlistgraphqlapi.service;

import de.karimbkb.wishlistgraphqlapi.Mocks;
import de.karimbkb.wishlistgraphqlapi.dto.Customer;
import de.karimbkb.wishlistgraphqlapi.dto.Product;
import de.karimbkb.wishlistgraphqlapi.dto.Wishlist;
import de.karimbkb.wishlistgraphqlapi.exception.ProductAlreadyOnWishlistException;
import de.karimbkb.wishlistgraphqlapi.model.CustomerApi;
import de.karimbkb.wishlistgraphqlapi.repository.WishlistRepository;
import io.micronaut.core.util.CollectionUtils;
import io.micronaut.test.annotation.MockBean;
import io.micronaut.test.extensions.junit5.annotation.MicronautTest;
import io.micronaut.test.support.TestPropertyProvider;
import org.junit.ClassRule;
import org.junit.jupiter.api.*;
import org.testcontainers.containers.GenericContainer;
import org.testcontainers.junit.jupiter.Testcontainers;
import org.testcontainers.utility.MountableFile;

import javax.annotation.Nonnull;
import javax.inject.Inject;
import java.io.IOException;
import java.util.Locale;
import java.util.Map;

import static org.mockito.Mockito.mock;
import static org.mockito.Mockito.when;

@Testcontainers
@MicronautTest(transactional = false)
@TestInstance(TestInstance.Lifecycle.PER_CLASS)
class AddProductToWishlistTest extends Mocks implements TestPropertyProvider {

  @Inject private CustomerApi customerApi;
  @Inject private WishlistRepository wishlistRepository;
  @Inject private AddProductToWishlist addProductToWishlist;

  @ClassRule
  public static GenericContainer<?> mongoDBContainer =
      new GenericContainer<>("mongo:latest")
          .withReuse(true)
          .withCopyFileToContainer(
              MountableFile.forClasspathResource("init-mongo.js"),
              "/docker-entrypoint-initdb.d/init-mongo.js")
          .withCopyFileToContainer(
              MountableFile.forClasspathResource("clean-collections.js"), "/clean-collections.js");

  static {
    mongoDBContainer.start();
  }

  @AfterEach
  void cleanDatabase() throws IOException, InterruptedException {
    mongoDBContainer.execInContainer("/bin/sh", "-c", "mongo wishlists < clean-collections.js");
  }

  @AfterAll
  void tearDown() {
    mongoDBContainer.close();
  }

  @Nonnull
  @Override
  public Map<String, String> getProperties() {
    return CollectionUtils.mapOf(
        "mongodb.uri",
        "mongodb://localhost:" + mongoDBContainer.getMappedPort(27017) + "/wishlists");
  }

  @Test
  void execute() throws InterruptedException {
    Customer customer = loadCustomerMock();
    Product product = loadProductMock();

    when(customerApi.loadCustomer("3e9e0680-9ff5-4b9a-88e9-84b17cbf1be2")).thenReturn(customer);

    addProductToWishlist.execute(product, customer.getId(), Locale.forLanguageTag("pl-PL"));

    Wishlist wishlist = wishlistRepository.loadWishlist(customer, Locale.forLanguageTag("pl-PL"));

    Assertions.assertEquals(wishlist.getCustomerId(), customer.getId());
    Assertions.assertEquals(wishlist.getLocale(), "pl-PL");
    Assertions.assertEquals(wishlist.getProducts().get(0).getId(), product.getId());
  }

  @Test
  void executeWithMissingWishlist() throws InterruptedException {
    Customer customer = loadCustomerMock();
    Product product = loadProductMock();

    when(customerApi.loadCustomer("3e9e0680-9ff5-4b9a-88e9-84b17cbf1be2")).thenReturn(customer);

    addProductToWishlist.execute(product, customer.getId(), Locale.forLanguageTag("pl-PL"));

    Wishlist wishlist = wishlistRepository.loadWishlist(customer, Locale.forLanguageTag("pl-PL"));

    Assertions.assertEquals(wishlist.getCustomerId(), customer.getId());
    Assertions.assertEquals(wishlist.getLocale(), "pl-PL");
    Assertions.assertEquals(wishlist.getProducts().get(0).getId(), product.getId());
  }

  @Test
  void executeWithProductAlreadyOnWishlistException() throws InterruptedException {
    Customer customer = loadCustomerMock();
    Product product = loadProductMock();

    when(customerApi.loadCustomer("3e9e0680-9ff5-4b9a-88e9-84b17cbf1be2")).thenReturn(customer);

    addProductToWishlist.execute(product, customer.getId(), Locale.forLanguageTag("pl-PL"));

    Assertions.assertThrows(
        ProductAlreadyOnWishlistException.class,
        () -> {
          addProductToWishlist.execute(product, customer.getId(), Locale.forLanguageTag("pl-PL"));
        });
  }

  @MockBean(CustomerApi.class)
  CustomerApi customerApi() {
    return mock(CustomerApi.class);
  }
}
